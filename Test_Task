{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPkp1pRPDOl81C1FIpE3oNM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Leonhard13/Leonhard13/blob/main/Test_Task\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Task 1. Working with data**"
      ],
      "metadata": {
        "id": "0dLFV7LG5Q47"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.2. The duration column contains data on the film length. How many missing values are there in this column?"
      ],
      "metadata": {
        "id": "e-TXajwc6QDs"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K_GdFw5v5HyP"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt \n",
        "import plotly.express as px \n",
        "import datetime as dt "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('movie_metadata.csv')\n",
        "columns_names = data.columns.values\n",
        "columns_names\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hDmA5Q0D6o90",
        "outputId": "f0ab1b68-df74-4c1d-a76f-222736c2a07e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['color', 'director_name', 'num_critic_for_reviews', 'duration',\n",
              "       'director_facebook_likes', 'actor_3_facebook_likes',\n",
              "       'actor_2_name', 'actor_1_facebook_likes', 'gross', 'genres',\n",
              "       'actor_1_name', 'movie_title', 'num_voted_users',\n",
              "       'cast_total_facebook_likes', 'actor_3_name',\n",
              "       'facenumber_in_poster', 'plot_keywords', 'movie_imdb_link',\n",
              "       'num_user_for_reviews', 'language', 'country', 'content_rating',\n",
              "       'budget', 'title_year', 'actor_2_facebook_likes', 'imdb_score',\n",
              "       'aspect_ratio', 'movie_facebook_likes'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primero identificamos el nombre de la variable: 'duration' , posteriormente usamos el siguiente comando para observar num√©ricamente cuantos datos tiene."
      ],
      "metadata": {
        "id": "uFfW1lGD7FLh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.info(verbose=True,null_counts=True)\n",
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qIQHEeaX6_z5",
        "outputId": "f85f1e01-672a-47e5-c1f3-74632a467fde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5043 entries, 0 to 5042\n",
            "Data columns (total 28 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   color                      5024 non-null   object \n",
            " 1   director_name              4939 non-null   object \n",
            " 2   num_critic_for_reviews     4993 non-null   float64\n",
            " 3   duration                   5028 non-null   float64\n",
            " 4   director_facebook_likes    4939 non-null   float64\n",
            " 5   actor_3_facebook_likes     5020 non-null   float64\n",
            " 6   actor_2_name               5030 non-null   object \n",
            " 7   actor_1_facebook_likes     5036 non-null   float64\n",
            " 8   gross                      4159 non-null   float64\n",
            " 9   genres                     5043 non-null   object \n",
            " 10  actor_1_name               5036 non-null   object \n",
            " 11  movie_title                5043 non-null   object \n",
            " 12  num_voted_users            5043 non-null   int64  \n",
            " 13  cast_total_facebook_likes  5043 non-null   int64  \n",
            " 14  actor_3_name               5020 non-null   object \n",
            " 15  facenumber_in_poster       5030 non-null   float64\n",
            " 16  plot_keywords              4890 non-null   object \n",
            " 17  movie_imdb_link            5043 non-null   object \n",
            " 18  num_user_for_reviews       5022 non-null   float64\n",
            " 19  language                   5031 non-null   object \n",
            " 20  country                    5038 non-null   object \n",
            " 21  content_rating             4740 non-null   object \n",
            " 22  budget                     5043 non-null   object \n",
            " 23  title_year                 4935 non-null   float64\n",
            " 24  actor_2_facebook_likes     5030 non-null   float64\n",
            " 25  imdb_score                 5043 non-null   float64\n",
            " 26  aspect_ratio               4714 non-null   float64\n",
            " 27  movie_facebook_likes       5043 non-null   int64  \n",
            "dtypes: float64(12), int64(3), object(13)\n",
            "memory usage: 1.1+ MB\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: null_counts is deprecated. Use show_counts instead\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "color                         19\n",
              "director_name                104\n",
              "num_critic_for_reviews        50\n",
              "duration                      15\n",
              "director_facebook_likes      104\n",
              "actor_3_facebook_likes        23\n",
              "actor_2_name                  13\n",
              "actor_1_facebook_likes         7\n",
              "gross                        884\n",
              "genres                         0\n",
              "actor_1_name                   7\n",
              "movie_title                    0\n",
              "num_voted_users                0\n",
              "cast_total_facebook_likes      0\n",
              "actor_3_name                  23\n",
              "facenumber_in_poster          13\n",
              "plot_keywords                153\n",
              "movie_imdb_link                0\n",
              "num_user_for_reviews          21\n",
              "language                      12\n",
              "country                        5\n",
              "content_rating               303\n",
              "budget                         0\n",
              "title_year                   108\n",
              "actor_2_facebook_likes        13\n",
              "imdb_score                     0\n",
              "aspect_ratio                 329\n",
              "movie_facebook_likes           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observamos que  en la variable 3 (Duration) hay 5,028 datos y hay un total de 5,043 entradas, es decir, tenemos 15 valores perdidos. En la tabla 2, tenemos el conteo de los valores perdidos por variable dentro del conjunto de datos y se confirma la existencia de valores perdidos en \"Duration\"."
      ],
      "metadata": {
        "id": "DNoUZe0-7fqz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.3. Replace the missing values in the duration column with the median value for this column."
      ],
      "metadata": {
        "id": "kn03JVas8Mcd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#data.fillna(data.median())\n",
        "data['duration2'] = data['duration'].fillna(data['duration'].median())\n"
      ],
      "metadata": {
        "id": "oQr72C4H8O_t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.4. What is the average film length? Give the answer as a floating-point figure rounded to two decimal places."
      ],
      "metadata": {
        "id": "P0MkjNxF97uW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "AVGFilm = round(data['duration2'].mean(),2)\n",
        "AVGFilm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RSdW6CmC9_oR",
        "outputId": "d0694a8e-0953-4444-de39-f591fac98a4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "107.19"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.5. Create a movie_duration_category column, which will contain three categories\n",
        "depending on the film length:\n",
        "‚Ä¢ Category \"1. <90\" if the film is less than 90 minutes long\n",
        "‚Ä¢ Category \"2. 90‚Äì120\" if the film is between 90 minutes and two hours long (inclusively)\n",
        "‚Ä¢ Category \"3. >120\" if the film is more than two hours long"
      ],
      "metadata": {
        "id": "JPdgq2Rz---L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#data['duration2'].value_counts(bins=[-1,0,90,120]).to_frame()\n",
        "import math\n",
        "valores = [-math.inf, 89.999, 120, math.inf]\n",
        "categorias = [\"1. <90\" ,\"2. 90‚Äì120\", \"3. >120\"]\n",
        "data[\"movie_duration_category\"]= pd.cut(x=data[\"duration2\"],bins=valores,labels =categorias)\n",
        "data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 592
        },
        "id": "U8K9gvew_C0B",
        "outputId": "6cad5333-6fc0-4e30-8868-43fe612ef058"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-7f57a159-8d63-47a1-a646-02bdcfa9c4f3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "      <th>director_name</th>\n",
              "      <th>num_critic_for_reviews</th>\n",
              "      <th>duration</th>\n",
              "      <th>director_facebook_likes</th>\n",
              "      <th>actor_3_facebook_likes</th>\n",
              "      <th>actor_2_name</th>\n",
              "      <th>actor_1_facebook_likes</th>\n",
              "      <th>gross</th>\n",
              "      <th>genres</th>\n",
              "      <th>...</th>\n",
              "      <th>country</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>budget</th>\n",
              "      <th>title_year</th>\n",
              "      <th>actor_2_facebook_likes</th>\n",
              "      <th>imdb_score</th>\n",
              "      <th>aspect_ratio</th>\n",
              "      <th>movie_facebook_likes</th>\n",
              "      <th>duration2</th>\n",
              "      <th>movie_duration_category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Color</td>\n",
              "      <td>James Cameron</td>\n",
              "      <td>723.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>855.0</td>\n",
              "      <td>Joel David Moore</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>760505847.0</td>\n",
              "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>237000000.0$</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.78</td>\n",
              "      <td>33000</td>\n",
              "      <td>178.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Color</td>\n",
              "      <td>Gore Verbinski</td>\n",
              "      <td>302.0</td>\n",
              "      <td>169.0</td>\n",
              "      <td>563.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>Orlando Bloom</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>309404152.0</td>\n",
              "      <td>Action|Adventure|Fantasy</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>300000000.0$</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>2.35</td>\n",
              "      <td>0</td>\n",
              "      <td>169.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Color</td>\n",
              "      <td>Sam Mendes</td>\n",
              "      <td>602.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>Rory Kinnear</td>\n",
              "      <td>11000.0</td>\n",
              "      <td>200074175.0</td>\n",
              "      <td>Action|Adventure|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>UK</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>245000000.0$</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>393.0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>2.35</td>\n",
              "      <td>85000</td>\n",
              "      <td>148.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Color</td>\n",
              "      <td>Christopher Nolan</td>\n",
              "      <td>813.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>22000.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>Christian Bale</td>\n",
              "      <td>27000.0</td>\n",
              "      <td>448130642.0</td>\n",
              "      <td>Action|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>250000000.0$</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>8.5</td>\n",
              "      <td>2.35</td>\n",
              "      <td>164000</td>\n",
              "      <td>164.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Doug Walker</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>131.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Rob Walker</td>\n",
              "      <td>131.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5038</th>\n",
              "      <td>Color</td>\n",
              "      <td>Scott Smith</td>\n",
              "      <td>1.0</td>\n",
              "      <td>87.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>318.0</td>\n",
              "      <td>Daphne Zuniga</td>\n",
              "      <td>637.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Comedy|Drama</td>\n",
              "      <td>...</td>\n",
              "      <td>Canada</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>470.0</td>\n",
              "      <td>7.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>84</td>\n",
              "      <td>87.0</td>\n",
              "      <td>1. &lt;90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5039</th>\n",
              "      <td>Color</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>319.0</td>\n",
              "      <td>Valorie Curry</td>\n",
              "      <td>841.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Crime|Drama|Mystery|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>NaN</td>\n",
              "      <td>593.0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>16.00</td>\n",
              "      <td>32000</td>\n",
              "      <td>43.0</td>\n",
              "      <td>1. &lt;90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5040</th>\n",
              "      <td>Color</td>\n",
              "      <td>Benjamin Roberds</td>\n",
              "      <td>13.0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Maxwell Moody</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Drama|Horror|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1400.0$</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16</td>\n",
              "      <td>76.0</td>\n",
              "      <td>1. &lt;90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5041</th>\n",
              "      <td>Color</td>\n",
              "      <td>Daniel Hsia</td>\n",
              "      <td>14.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>489.0</td>\n",
              "      <td>Daniel Henney</td>\n",
              "      <td>946.0</td>\n",
              "      <td>10443.0</td>\n",
              "      <td>Comedy|Drama|Romance</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>719.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>2.35</td>\n",
              "      <td>660</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5042</th>\n",
              "      <td>Color</td>\n",
              "      <td>Jon Gunn</td>\n",
              "      <td>43.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Brian Herzlinger</td>\n",
              "      <td>86.0</td>\n",
              "      <td>85222.0</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>...</td>\n",
              "      <td>USA</td>\n",
              "      <td>PG</td>\n",
              "      <td>1100.0$</td>\n",
              "      <td>2004.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>1.85</td>\n",
              "      <td>456</td>\n",
              "      <td>90.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5043 rows √ó 30 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f57a159-8d63-47a1-a646-02bdcfa9c4f3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7f57a159-8d63-47a1-a646-02bdcfa9c4f3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7f57a159-8d63-47a1-a646-02bdcfa9c4f3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "      color      director_name  num_critic_for_reviews  duration  \\\n",
              "0     Color      James Cameron                   723.0     178.0   \n",
              "1     Color     Gore Verbinski                   302.0     169.0   \n",
              "2     Color         Sam Mendes                   602.0     148.0   \n",
              "3     Color  Christopher Nolan                   813.0     164.0   \n",
              "4       NaN        Doug Walker                     NaN       NaN   \n",
              "...     ...                ...                     ...       ...   \n",
              "5038  Color        Scott Smith                     1.0      87.0   \n",
              "5039  Color                NaN                    43.0      43.0   \n",
              "5040  Color   Benjamin Roberds                    13.0      76.0   \n",
              "5041  Color        Daniel Hsia                    14.0     100.0   \n",
              "5042  Color           Jon Gunn                    43.0      90.0   \n",
              "\n",
              "      director_facebook_likes  actor_3_facebook_likes      actor_2_name  \\\n",
              "0                         0.0                   855.0  Joel David Moore   \n",
              "1                       563.0                  1000.0     Orlando Bloom   \n",
              "2                         0.0                   161.0      Rory Kinnear   \n",
              "3                     22000.0                 23000.0    Christian Bale   \n",
              "4                       131.0                     NaN        Rob Walker   \n",
              "...                       ...                     ...               ...   \n",
              "5038                      2.0                   318.0     Daphne Zuniga   \n",
              "5039                      NaN                   319.0     Valorie Curry   \n",
              "5040                      0.0                     0.0     Maxwell Moody   \n",
              "5041                      0.0                   489.0     Daniel Henney   \n",
              "5042                     16.0                    16.0  Brian Herzlinger   \n",
              "\n",
              "      actor_1_facebook_likes        gross                           genres  \\\n",
              "0                     1000.0  760505847.0  Action|Adventure|Fantasy|Sci-Fi   \n",
              "1                    40000.0  309404152.0         Action|Adventure|Fantasy   \n",
              "2                    11000.0  200074175.0        Action|Adventure|Thriller   \n",
              "3                    27000.0  448130642.0                  Action|Thriller   \n",
              "4                      131.0          NaN                      Documentary   \n",
              "...                      ...          ...                              ...   \n",
              "5038                   637.0          NaN                     Comedy|Drama   \n",
              "5039                   841.0          NaN     Crime|Drama|Mystery|Thriller   \n",
              "5040                     0.0          NaN            Drama|Horror|Thriller   \n",
              "5041                   946.0      10443.0             Comedy|Drama|Romance   \n",
              "5042                    86.0      85222.0                      Documentary   \n",
              "\n",
              "      ... country content_rating        budget  title_year  \\\n",
              "0     ...     USA          PG-13  237000000.0$      2009.0   \n",
              "1     ...     USA          PG-13  300000000.0$      2007.0   \n",
              "2     ...      UK          PG-13  245000000.0$      2015.0   \n",
              "3     ...     USA          PG-13  250000000.0$      2012.0   \n",
              "4     ...     NaN            NaN          0.0$         NaN   \n",
              "...   ...     ...            ...           ...         ...   \n",
              "5038  ...  Canada            NaN          0.0$      2013.0   \n",
              "5039  ...     USA          TV-14          0.0$         NaN   \n",
              "5040  ...     USA            NaN       1400.0$      2013.0   \n",
              "5041  ...     USA          PG-13          0.0$      2012.0   \n",
              "5042  ...     USA             PG       1100.0$      2004.0   \n",
              "\n",
              "     actor_2_facebook_likes  imdb_score aspect_ratio movie_facebook_likes  \\\n",
              "0                     936.0         7.9         1.78                33000   \n",
              "1                    5000.0         7.1         2.35                    0   \n",
              "2                     393.0         6.8         2.35                85000   \n",
              "3                   23000.0         8.5         2.35               164000   \n",
              "4                      12.0         7.1          NaN                    0   \n",
              "...                     ...         ...          ...                  ...   \n",
              "5038                  470.0         7.7          NaN                   84   \n",
              "5039                  593.0         7.5        16.00                32000   \n",
              "5040                    0.0         6.3          NaN                   16   \n",
              "5041                  719.0         6.3         2.35                  660   \n",
              "5042                   23.0         6.6         1.85                  456   \n",
              "\n",
              "      duration2 movie_duration_category  \n",
              "0         178.0                 3. >120  \n",
              "1         169.0                 3. >120  \n",
              "2         148.0                 3. >120  \n",
              "3         164.0                 3. >120  \n",
              "4         103.0               2. 90‚Äì120  \n",
              "...         ...                     ...  \n",
              "5038       87.0                  1. <90  \n",
              "5039       43.0                  1. <90  \n",
              "5040       76.0                  1. <90  \n",
              "5041      100.0               2. 90‚Äì120  \n",
              "5042       90.0               2. 90‚Äì120  \n",
              "\n",
              "[5043 rows x 30 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.6. Build a summary table for films released after 2000 (inclusively), to list the numbers of films:\n",
        "\n",
        "*   Table rows: year\n",
        "*   Table columns: movie duration category (\"<90\", \"90‚Äì120\", \">120\")\n",
        "*   The year of release should be displayed in the YYYY format.\n",
        " "
      ],
      "metadata": {
        "id": "kJQCSZtsadGF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_2000 = data[data[\"title_year\"] >= 2000]\n",
        "data_2000['ID']=list(range(1,data_2000['title_year'].count()+1))\n",
        "data_2000['title_year'] = data_2000['title_year'].astype(np.int64)\n",
        "data_2000"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 844
        },
        "id": "xx5mudeSklA0",
        "outputId": "0fda029f-524e-4828-e88d-b9c5ed29fd98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1a278925-e887-44ff-a5f2-237164ed6e36\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "      <th>director_name</th>\n",
              "      <th>num_critic_for_reviews</th>\n",
              "      <th>duration</th>\n",
              "      <th>director_facebook_likes</th>\n",
              "      <th>actor_3_facebook_likes</th>\n",
              "      <th>actor_2_name</th>\n",
              "      <th>actor_1_facebook_likes</th>\n",
              "      <th>gross</th>\n",
              "      <th>genres</th>\n",
              "      <th>...</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>budget</th>\n",
              "      <th>title_year</th>\n",
              "      <th>actor_2_facebook_likes</th>\n",
              "      <th>imdb_score</th>\n",
              "      <th>aspect_ratio</th>\n",
              "      <th>movie_facebook_likes</th>\n",
              "      <th>duration2</th>\n",
              "      <th>movie_duration_category</th>\n",
              "      <th>ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Color</td>\n",
              "      <td>James Cameron</td>\n",
              "      <td>723.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>855.0</td>\n",
              "      <td>Joel David Moore</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>760505847.0</td>\n",
              "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>237000000.0$</td>\n",
              "      <td>2009</td>\n",
              "      <td>936.0</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.78</td>\n",
              "      <td>33000</td>\n",
              "      <td>178.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Color</td>\n",
              "      <td>Gore Verbinski</td>\n",
              "      <td>302.0</td>\n",
              "      <td>169.0</td>\n",
              "      <td>563.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>Orlando Bloom</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>309404152.0</td>\n",
              "      <td>Action|Adventure|Fantasy</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>300000000.0$</td>\n",
              "      <td>2007</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>2.35</td>\n",
              "      <td>0</td>\n",
              "      <td>169.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Color</td>\n",
              "      <td>Sam Mendes</td>\n",
              "      <td>602.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>Rory Kinnear</td>\n",
              "      <td>11000.0</td>\n",
              "      <td>200074175.0</td>\n",
              "      <td>Action|Adventure|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>245000000.0$</td>\n",
              "      <td>2015</td>\n",
              "      <td>393.0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>2.35</td>\n",
              "      <td>85000</td>\n",
              "      <td>148.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Color</td>\n",
              "      <td>Christopher Nolan</td>\n",
              "      <td>813.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>22000.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>Christian Bale</td>\n",
              "      <td>27000.0</td>\n",
              "      <td>448130642.0</td>\n",
              "      <td>Action|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>250000000.0$</td>\n",
              "      <td>2012</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>8.5</td>\n",
              "      <td>2.35</td>\n",
              "      <td>164000</td>\n",
              "      <td>164.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Color</td>\n",
              "      <td>Andrew Stanton</td>\n",
              "      <td>462.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>475.0</td>\n",
              "      <td>530.0</td>\n",
              "      <td>Samantha Morton</td>\n",
              "      <td>640.0</td>\n",
              "      <td>73058679.0</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>263700000.0$</td>\n",
              "      <td>2012</td>\n",
              "      <td>632.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>2.35</td>\n",
              "      <td>24000</td>\n",
              "      <td>132.0</td>\n",
              "      <td>3. &gt;120</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5037</th>\n",
              "      <td>Color</td>\n",
              "      <td>Edward Burns</td>\n",
              "      <td>14.0</td>\n",
              "      <td>95.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>Caitlin FitzGerald</td>\n",
              "      <td>296.0</td>\n",
              "      <td>4584.0</td>\n",
              "      <td>Comedy|Drama</td>\n",
              "      <td>...</td>\n",
              "      <td>Not Rated</td>\n",
              "      <td>9000.0$</td>\n",
              "      <td>2011</td>\n",
              "      <td>205.0</td>\n",
              "      <td>6.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>413</td>\n",
              "      <td>95.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "      <td>3593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5038</th>\n",
              "      <td>Color</td>\n",
              "      <td>Scott Smith</td>\n",
              "      <td>1.0</td>\n",
              "      <td>87.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>318.0</td>\n",
              "      <td>Daphne Zuniga</td>\n",
              "      <td>637.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Comedy|Drama</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>2013</td>\n",
              "      <td>470.0</td>\n",
              "      <td>7.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>84</td>\n",
              "      <td>87.0</td>\n",
              "      <td>1. &lt;90</td>\n",
              "      <td>3594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5040</th>\n",
              "      <td>Color</td>\n",
              "      <td>Benjamin Roberds</td>\n",
              "      <td>13.0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Maxwell Moody</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Drama|Horror|Thriller</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1400.0$</td>\n",
              "      <td>2013</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16</td>\n",
              "      <td>76.0</td>\n",
              "      <td>1. &lt;90</td>\n",
              "      <td>3595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5041</th>\n",
              "      <td>Color</td>\n",
              "      <td>Daniel Hsia</td>\n",
              "      <td>14.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>489.0</td>\n",
              "      <td>Daniel Henney</td>\n",
              "      <td>946.0</td>\n",
              "      <td>10443.0</td>\n",
              "      <td>Comedy|Drama|Romance</td>\n",
              "      <td>...</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>0.0$</td>\n",
              "      <td>2012</td>\n",
              "      <td>719.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>2.35</td>\n",
              "      <td>660</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "      <td>3596</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5042</th>\n",
              "      <td>Color</td>\n",
              "      <td>Jon Gunn</td>\n",
              "      <td>43.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>Brian Herzlinger</td>\n",
              "      <td>86.0</td>\n",
              "      <td>85222.0</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>...</td>\n",
              "      <td>PG</td>\n",
              "      <td>1100.0$</td>\n",
              "      <td>2004</td>\n",
              "      <td>23.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>1.85</td>\n",
              "      <td>456</td>\n",
              "      <td>90.0</td>\n",
              "      <td>2. 90‚Äì120</td>\n",
              "      <td>3597</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3597 rows √ó 31 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a278925-e887-44ff-a5f2-237164ed6e36')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1a278925-e887-44ff-a5f2-237164ed6e36 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1a278925-e887-44ff-a5f2-237164ed6e36');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "      color      director_name  num_critic_for_reviews  duration  \\\n",
              "0     Color      James Cameron                   723.0     178.0   \n",
              "1     Color     Gore Verbinski                   302.0     169.0   \n",
              "2     Color         Sam Mendes                   602.0     148.0   \n",
              "3     Color  Christopher Nolan                   813.0     164.0   \n",
              "5     Color     Andrew Stanton                   462.0     132.0   \n",
              "...     ...                ...                     ...       ...   \n",
              "5037  Color       Edward Burns                    14.0      95.0   \n",
              "5038  Color        Scott Smith                     1.0      87.0   \n",
              "5040  Color   Benjamin Roberds                    13.0      76.0   \n",
              "5041  Color        Daniel Hsia                    14.0     100.0   \n",
              "5042  Color           Jon Gunn                    43.0      90.0   \n",
              "\n",
              "      director_facebook_likes  actor_3_facebook_likes        actor_2_name  \\\n",
              "0                         0.0                   855.0    Joel David Moore   \n",
              "1                       563.0                  1000.0       Orlando Bloom   \n",
              "2                         0.0                   161.0        Rory Kinnear   \n",
              "3                     22000.0                 23000.0      Christian Bale   \n",
              "5                       475.0                   530.0     Samantha Morton   \n",
              "...                       ...                     ...                 ...   \n",
              "5037                      0.0                   133.0  Caitlin FitzGerald   \n",
              "5038                      2.0                   318.0       Daphne Zuniga   \n",
              "5040                      0.0                     0.0       Maxwell Moody   \n",
              "5041                      0.0                   489.0       Daniel Henney   \n",
              "5042                     16.0                    16.0    Brian Herzlinger   \n",
              "\n",
              "      actor_1_facebook_likes        gross                           genres  \\\n",
              "0                     1000.0  760505847.0  Action|Adventure|Fantasy|Sci-Fi   \n",
              "1                    40000.0  309404152.0         Action|Adventure|Fantasy   \n",
              "2                    11000.0  200074175.0        Action|Adventure|Thriller   \n",
              "3                    27000.0  448130642.0                  Action|Thriller   \n",
              "5                      640.0   73058679.0          Action|Adventure|Sci-Fi   \n",
              "...                      ...          ...                              ...   \n",
              "5037                   296.0       4584.0                     Comedy|Drama   \n",
              "5038                   637.0          NaN                     Comedy|Drama   \n",
              "5040                     0.0          NaN            Drama|Horror|Thriller   \n",
              "5041                   946.0      10443.0             Comedy|Drama|Romance   \n",
              "5042                    86.0      85222.0                      Documentary   \n",
              "\n",
              "      ... content_rating        budget  title_year  actor_2_facebook_likes  \\\n",
              "0     ...          PG-13  237000000.0$        2009                   936.0   \n",
              "1     ...          PG-13  300000000.0$        2007                  5000.0   \n",
              "2     ...          PG-13  245000000.0$        2015                   393.0   \n",
              "3     ...          PG-13  250000000.0$        2012                 23000.0   \n",
              "5     ...          PG-13  263700000.0$        2012                   632.0   \n",
              "...   ...            ...           ...         ...                     ...   \n",
              "5037  ...      Not Rated       9000.0$        2011                   205.0   \n",
              "5038  ...            NaN          0.0$        2013                   470.0   \n",
              "5040  ...            NaN       1400.0$        2013                     0.0   \n",
              "5041  ...          PG-13          0.0$        2012                   719.0   \n",
              "5042  ...             PG       1100.0$        2004                    23.0   \n",
              "\n",
              "     imdb_score  aspect_ratio movie_facebook_likes duration2  \\\n",
              "0           7.9          1.78                33000     178.0   \n",
              "1           7.1          2.35                    0     169.0   \n",
              "2           6.8          2.35                85000     148.0   \n",
              "3           8.5          2.35               164000     164.0   \n",
              "5           6.6          2.35                24000     132.0   \n",
              "...         ...           ...                  ...       ...   \n",
              "5037        6.4           NaN                  413      95.0   \n",
              "5038        7.7           NaN                   84      87.0   \n",
              "5040        6.3           NaN                   16      76.0   \n",
              "5041        6.3          2.35                  660     100.0   \n",
              "5042        6.6          1.85                  456      90.0   \n",
              "\n",
              "      movie_duration_category    ID  \n",
              "0                     3. >120     1  \n",
              "1                     3. >120     2  \n",
              "2                     3. >120     3  \n",
              "3                     3. >120     4  \n",
              "5                     3. >120     5  \n",
              "...                       ...   ...  \n",
              "5037                2. 90‚Äì120  3593  \n",
              "5038                   1. <90  3594  \n",
              "5040                   1. <90  3595  \n",
              "5041                2. 90‚Äì120  3596  \n",
              "5042                2. 90‚Äì120  3597  \n",
              "\n",
              "[3597 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pd.set_option('display.float_format', lambda x: '{:,.0f}' % x)\n",
        "#pd.reset_option('display.float_format')\n",
        "pd.pivot_table(data_2000, index='title_year', values='ID',columns='movie_duration_category', aggfunc='count',margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "2UO98XjqhXnj",
        "outputId": "95a2e537-fcdb-4fa1-f0ff-364b8fd892b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b0148d4c-6724-4ec1-aa37-949d105da855\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>movie_duration_category</th>\n",
              "      <th>1. &lt;90</th>\n",
              "      <th>2. 90‚Äì120</th>\n",
              "      <th>3. &gt;120</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title_year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2000</th>\n",
              "      <td>25</td>\n",
              "      <td>112</td>\n",
              "      <td>34</td>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>29</td>\n",
              "      <td>120</td>\n",
              "      <td>39</td>\n",
              "      <td>188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>36</td>\n",
              "      <td>146</td>\n",
              "      <td>27</td>\n",
              "      <td>209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>31</td>\n",
              "      <td>108</td>\n",
              "      <td>30</td>\n",
              "      <td>169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>30</td>\n",
              "      <td>142</td>\n",
              "      <td>42</td>\n",
              "      <td>214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>31</td>\n",
              "      <td>142</td>\n",
              "      <td>48</td>\n",
              "      <td>221</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>40</td>\n",
              "      <td>146</td>\n",
              "      <td>53</td>\n",
              "      <td>239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>31</td>\n",
              "      <td>130</td>\n",
              "      <td>43</td>\n",
              "      <td>204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>29</td>\n",
              "      <td>160</td>\n",
              "      <td>36</td>\n",
              "      <td>225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>42</td>\n",
              "      <td>178</td>\n",
              "      <td>40</td>\n",
              "      <td>260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>26</td>\n",
              "      <td>171</td>\n",
              "      <td>33</td>\n",
              "      <td>230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>36</td>\n",
              "      <td>150</td>\n",
              "      <td>39</td>\n",
              "      <td>225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>41</td>\n",
              "      <td>139</td>\n",
              "      <td>41</td>\n",
              "      <td>221</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>38</td>\n",
              "      <td>145</td>\n",
              "      <td>54</td>\n",
              "      <td>237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>36</td>\n",
              "      <td>171</td>\n",
              "      <td>45</td>\n",
              "      <td>252</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>34</td>\n",
              "      <td>145</td>\n",
              "      <td>47</td>\n",
              "      <td>226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>8</td>\n",
              "      <td>79</td>\n",
              "      <td>19</td>\n",
              "      <td>106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>543</td>\n",
              "      <td>2384</td>\n",
              "      <td>670</td>\n",
              "      <td>3597</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0148d4c-6724-4ec1-aa37-949d105da855')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b0148d4c-6724-4ec1-aa37-949d105da855 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b0148d4c-6724-4ec1-aa37-949d105da855');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "movie_duration_category  1. <90  2. 90‚Äì120  3. >120   All\n",
              "title_year                                               \n",
              "2000                         25        112       34   171\n",
              "2001                         29        120       39   188\n",
              "2002                         36        146       27   209\n",
              "2003                         31        108       30   169\n",
              "2004                         30        142       42   214\n",
              "2005                         31        142       48   221\n",
              "2006                         40        146       53   239\n",
              "2007                         31        130       43   204\n",
              "2008                         29        160       36   225\n",
              "2009                         42        178       40   260\n",
              "2010                         26        171       33   230\n",
              "2011                         36        150       39   225\n",
              "2012                         41        139       41   221\n",
              "2013                         38        145       54   237\n",
              "2014                         36        171       45   252\n",
              "2015                         34        145       47   226\n",
              "2016                          8         79       19   106\n",
              "All                         543       2384      670  3597"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.7. How many films between 90 minutes and two hours long were released in 2008?"
      ],
      "metadata": {
        "id": "Z4QG4RcXt188"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_2008 = data[data[\"title_year\"] == 2008]\n",
        "\n",
        "data_2008['duration2'].value_counts(bins=[90, 120]).to_frame()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "is-KMBoTt4-c",
        "outputId": "acb97aa2-5cdc-416b-bbbf-e33a5196d6ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-d5881e84-d35f-4ab5-a621-0020e15a1da6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>(89.999, 120.0]</th>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5881e84-d35f-4ab5-a621-0020e15a1da6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d5881e84-d35f-4ab5-a621-0020e15a1da6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d5881e84-d35f-4ab5-a621-0020e15a1da6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                 duration2\n",
              "(89.999, 120.0]        160"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.8. The plot_keywords column holds keywords characterizing the film's plot. Using the data\n",
        "in this column, create a column called movie_plot_category, to contain four categories\n",
        "depending on the key words in the column:\n",
        "* Category \"love_and_death\" if the keywords include both \"love\" and \"death\"\n",
        "* Category \"love\" if the keywords include the word \"love\"\n",
        "* Category \"death\" if the keywords include the word \"death\"\n",
        "* Category \"other\" if the keywords do not meet the conditions above\n"
      ],
      "metadata": {
        "id": "cR2LhfIqvgIQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "import re\n",
        "data['movie_plot_category3'] = data['plot_keywords2'].str.findall('love|death', flags=re.IGNORECASE)\n",
        "data['movie_plot_category3'] = sports_games.loc[df['Name'].str.contains(\"soccer|football\", case=False)]\n",
        "data2=data.loc[data['plot_keywords2'].str.contains(\"love|death\", case=False)]\n",
        "data2\n",
        "https://towardsdatascience.com/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852"
      ],
      "metadata": {
        "id": "hXfiTVYPLBg3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data['plot_keywords2'] = data['plot_keywords'].fillna(\"\")"
      ],
      "metadata": {
        "id": "X4LLzitc9zHv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['movie_plot_category'] = np.where(data['plot_keywords2'].str.contains('love'), 'love',\n",
        "                             (np.where(data['plot_keywords2'].str.contains('death'),'death',\n",
        "                             (np.where(data['plot_keywords2'].str.contains('love&death'),'love_and_death','other')))))\n"
      ],
      "metadata": {
        "id": "y5g5XzhQ6Ua9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['movie_plot_category'] = np.where(data['plot_keywords2'].str.contains('love'), 'love',\n",
        "                             (np.where(data['plot_keywords2'].str.contains('death'),'death',\n",
        "                             (np.intersect1d(np.where(data['plot_keywords2'].str.contains('love'), np.where(data['plot_keywords2'].str.contains('death')),'love_and_death',\n",
        "                             'other'))))\n"
      ],
      "metadata": {
        "id": "Crl_ZMAOAC0x",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "f0f779d4-c25b-494b-9971-2c2143ba235a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-42-71568fba81d6>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    'other'))))\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#A=np.where(data['plot_keywords2'].str.contains('love'))\n",
        "#B=np.where(data['plot_keywords2'].str.contains('death'))\n",
        "#C= np.intersect1d(A, B)\n",
        "\n",
        "data['movie_plot_category'] = np.where(data['plot_keywords2'].str.contains('love'),'love','others')\n",
        "data['movie_plot_category'] = np.where(data['plot_keywords2'].str.contains('death'),'death','others')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Y4anfAhYJXcK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A=np.where(data['plot_keywords2'].str.contains('love'))\n",
        "B=np.where(data['plot_keywords2'].str.contains('death'))\n",
        "C= np.intersect1d(A, B)\n",
        "\n",
        "print(C)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPF07CLBGdnL",
        "outputId": "77c545a0-d61d-42a5-ed0e-0076cbdd95ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 594  766  966 1145 1167 1261 1812 2022 2081 2689 3233 3799 4196 4222\n",
            " 4474 4493]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['movie_plot_category'][766] "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "CIi4Kcw2N05s",
        "outputId": "76c1b017-3bc6-48b9-a422-b96f361771e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'death'"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['plot_keywords2'][766]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Ap1iafKH75Pb",
        "outputId": "f07926ed-86b4-4166-cf89-9792d35a6a11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'curse|death|island|love|magic'"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.9. The imdb_score column shows a viewer rating for the film. Build a table to reflect the\n",
        "average rating of films depending on which movie_plot_category category they belong to.\n"
      ],
      "metadata": {
        "id": "ciMyfUdnKahI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "table = pd.pivot_table(data.dropna(), values='imdb_score', index=['movie_plot_category'],\n",
        "                aggfunc=[np.mean], margins=True)\n",
        "\n",
        "table"
      ],
      "metadata": {
        "id": "NAlqhmjXszYr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "67137e95-c2d9-4466-de28-74182fef6ef3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-fbef0ee7-3d58-40c0-9fc0-1a1bb844cba1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>imdb_score</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>movie_plot_category</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>death</th>\n",
              "      <td>6.566000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>others</th>\n",
              "      <td>6.469542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>6.473182</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbef0ee7-3d58-40c0-9fc0-1a1bb844cba1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fbef0ee7-3d58-40c0-9fc0-1a1bb844cba1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fbef0ee7-3d58-40c0-9fc0-1a1bb844cba1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                          mean\n",
              "                    imdb_score\n",
              "movie_plot_category           \n",
              "death                 6.566000\n",
              "others                6.469542\n",
              "All                   6.473182"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.10. What is the average rating of films in the \"love\" category? Give the answer as a floatingpoint\n",
        "figure rounded to two decimal places.\n"
      ],
      "metadata": {
        "id": "RGwZmqjlKcxV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "round(pd.to_numeric(table.loc['love']),2)"
      ],
      "metadata": {
        "id": "AzA6Y3hHKcXo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5cbd9e0-79b2-495b-a8fc-702f9313b51f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "mean  imdb_score    6.57\n",
              "Name: love, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.11. The budget column contains the film's budget. What is the median budget for all the films\n",
        "listed? Give the answer as an integer."
      ],
      "metadata": {
        "id": "jA9Oq6yuKfOH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data['budget2'] = data['budget'].astype(\"category\")\n",
        "data['budget2'] = data['budget2'].str.replace(\"$\", \"\")\n",
        "data['budget2'] = data[\"budget2\"].astype(float).astype(np.int64)\n",
        "#MedianBud = data['budget2'].median()\n",
        "import statistics\n",
        "MedianBud = statistics.median(data['budget2'])\n",
        "MedianBud\n"
      ],
      "metadata": {
        "id": "qeTG_QJRWbI_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4fcd19e6-8906-4374-e1a1-aaa5a7a7ebdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n",
            "  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15000000"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Task 2. Problem-solving**"
      ],
      "metadata": {
        "id": "3EdzbGUU5Vdq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Download the event_data.csv dataset, which contains data on the use of the mobile\n",
        "application of users who registered from July 29 to September 1, 2019:\n",
        "‚Ä¢ user_id - user identifier;\n",
        "‚Ä¢ event_date - time of the event;\n",
        "‚Ä¢ event_type - type of event: registration - registration in the application; simple_event\n",
        "\n",
        "click event in the application; purchase - an event of purchase within the application;\n",
        "purchase_amount - purchase amount.\n",
        "\n",
        "2. Highlight user cohorts based on the week of registration in the application. The cohort\n",
        "identifier should be the week ordinal (for example, the week from July 29 to August 4\n",
        "should have identifier 31).\n",
        "\n",
        "3. How many unique users in the cohort with ID 33?\n",
        "\n",
        "4. For each event, highlight the indicator lifetime - the weekly lifetime of the cohort. The\n",
        "lifetime indicator is calculated based on the serial number of the week in which the event\n",
        "is committed, relative to the week of registration. For example, an event committed on\n",
        "August 3 by a user from a cohort of registrants at 31 weeks will be committed on the zero\n",
        "week of lifetime, and an event committed by the same user on August 5 will be committed\n",
        "on the first week of lifetime).\n",
        "\n",
        "5. Build a summary table of changes in the Retention Rate for cohorts depending on lifetime.\n",
        "\n",
        "6. What is the 3 week retention rate for a cohort with ID 32? Give the answer in percent,\n",
        "rounded to 2 decimal places, inclusive.\n",
        "\n",
        "7. Build a summary table of changes in the indicator ARPPU (Average Revenue Per Paying\n",
        "User) for cohorts depending on lifetime.\n",
        "\n",
        "8. What is the 3-week ARPPU of a cohort with ID 31? Give the answer with a floating point\n",
        "number, rounded to 2 decimal places, inclusive.\n",
        "\n",
        "9. What is the median time between user registration and first purchase? Give the answer\n",
        "in seconds (!) As an integer."
      ],
      "metadata": {
        "id": "e-sYrJR1lBdq"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3I8DOGxtKdz0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Y6XernrQ5aT_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "6zRBTms_5axa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Task 3. Answering student questions** \n",
        "\n",
        "How would you answer the student's question below? Your task is to get your message across in such a way that a beginner can understand your explanation. You can do this any way you want (pictures, GIFs, metaphors, anything) so long as it makes your explanation clear.\n",
        "Answer the question: \"What is the difference between DataFrame and Series?\"\n",
        "Indicate how much time you spent completing this task.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "olNsUPpo5coX"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "20qLoMeW51_G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Task 4.**\n",
        "You are given two random variables X and Y\n",
        "\n",
        "*   E(X) = 0.5, Var(X) = 2\n",
        "*   E(Y) = 7, Var(Y) = 3.5\n",
        "*   cov (X, Y) = -0.8 \n",
        "\n",
        "Find the variance of the random variable Z = 2X - 3Y"
      ],
      "metadata": {
        "id": "4pD7f01N54B4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "De acuerdo con las propiedades de la varianza, tenemos:\n",
        "* Var(cX) = c^2 Var(X)\n",
        "\n",
        "Si X e Y son independientes: \n",
        "* Var (X + Y) = Var (X) + Var (Y).\n",
        "\n",
        "Y conforme a las propiedades de funciones lineales:\n",
        "\n",
        "* V[X¬±Y] = Var[X] + Var[Y] ¬± 2 ¬∑ Cov(X,Y)\n",
        "\n",
        "Posteriormente sustituyendo:\n",
        "\n",
        "* Var(2X‚àí3Y) = Var(2X) + Var(‚àí3Y) + 2 ¬∑ Cov(2X,-3Y)\n",
        "* Var(2X‚àí3Y) = 4Var(X) + 9Var(Y) - 12Cov(X,Y)\n",
        "* Var(2X‚àí3Y) = 4(2) + 9(3.5) - 12(-0.8)\n",
        "* Var(2X‚àí3Y) = 8 + 31.5 + 9.6\n",
        "* Var(2X‚àí3Y) = 49.1\n",
        "* Var(Z) = 49.1"
      ],
      "metadata": {
        "id": "BLw2QFrRaT1s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def SumVar(C1,C2,V1,V2,Cov):\n",
        " Resultado = (C1**2)*V1 + (C2**2)*V2 + 2*C1*C2*Cov \n",
        " print('La varianza es: ',Resultado)\n"
      ],
      "metadata": {
        "id": "LzC1mPHi6Gr4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "SumVar(2,-3,2,3.5,-0.8)"
      ],
      "metadata": {
        "id": "TJAoZPpAwizG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ff78e264-a7ad-41aa-9859-c9ab1c6e288b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La varianza es:  49.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 5.\n",
        "Omer trained a linear regression model and tested its performance on a test sample of 500 objects. \n",
        "* On 400 of those, the model returned a prediction higher than expected by 0.5, \n",
        "* and on the remaining 100, the model returned a prediction lower than expected by 0.7.\n",
        "\n",
        "What is the MSE for his model?\n",
        "\n",
        "Limor claims that the linear regression model wasn't trained correctly, and we can do improve it by changing all the answers by a constant value. \n",
        "\n",
        "What will be her MSE?\n",
        "\n",
        "You can assume that Limor found the smallest error under her constraints.\n",
        "\n",
        "Return two values - Omer's and Limor's MSE"
      ],
      "metadata": {
        "id": "SGZGgxyv6HFf"
      }
    }
  ]
}